"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var decorator_parser_1 = require('./decorator-parser');
var decorators_1 = require("./decorators");
var TestServiceA = (function () {
    function TestServiceA() {
    }
    TestServiceA.prototype.x = function () { };
    __decorate([
        decorators_1.GET(), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], TestServiceA.prototype, "x", null);
    TestServiceA = __decorate([
        decorators_1.PermitAll(),
        decorators_1.Path('/'), 
        __metadata('design:paramtypes', [])
    ], TestServiceA);
    return TestServiceA;
}());
var TestServiceB = (function () {
    function TestServiceB() {
    }
    TestServiceB.prototype.x = function () { };
    __decorate([
        decorators_1.GET(), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], TestServiceB.prototype, "x", null);
    TestServiceB = __decorate([
        decorators_1.Path('/'), 
        __metadata('design:paramtypes', [])
    ], TestServiceB);
    return TestServiceB;
}());
var TestServiceC = (function () {
    function TestServiceC() {
    }
    TestServiceC.prototype.x = function () { };
    __decorate([
        decorators_1.GET(),
        decorators_1.RolesAllowed(['user']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], TestServiceC.prototype, "x", null);
    return TestServiceC;
}());
var TestServiceD = (function () {
    function TestServiceD() {
    }
    TestServiceD.prototype.x = function (conext) { };
    __decorate([
        decorators_1.GET(),
        __param(0, decorators_1.SecurityContext()), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [Object]), 
        __metadata('design:returntype', void 0)
    ], TestServiceD.prototype, "x", null);
    return TestServiceD;
}());
describe('ServiceDescription', function () {
    it('should need a security context - permitAll at class level', function () {
        var serviceDescription = decorator_parser_1.ServiceParser.parse(new TestServiceA());
        expect(serviceDescription.isSecurityContextUsed()).toBe(true);
    });
    it('should not need a security context', function () {
        var serviceDescription = decorator_parser_1.ServiceParser.parse(new TestServiceB());
        expect(serviceDescription.isSecurityContextUsed()).toBe(false);
    });
    it('should need a security context - RolesAllowed at method level', function () {
        var serviceDescription = decorator_parser_1.ServiceParser.parse(new TestServiceC());
        expect(serviceDescription.isSecurityContextUsed()).toBe(true);
    });
    it('should need a security context - SecurityContextParam', function () {
        var serviceDescription = decorator_parser_1.ServiceParser.parse(new TestServiceD());
        expect(serviceDescription.isSecurityContextUsed()).toBe(true);
    });
});
//# sourceMappingURL=descriptions.spec.js.map