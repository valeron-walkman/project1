"use strict";
/**
 * A heigher level description of a service. No need to parse
 * the Decortaors by yourself. Just use the @see ServiceParser.
 */
var ServiceDescription = (function () {
    function ServiceDescription() {
        this.permitAll = false;
        this.rolesAllowed = [];
        this.methods = [];
        this.methodMap = {};
    }
    ServiceDescription.prototype.addMethod = function (methodDescriptor) {
        this.methods.push(methodDescriptor);
        this.methodMap[methodDescriptor.methodName] = methodDescriptor;
    };
    ServiceDescription.prototype.getMethodDescriptorForMethodName = function (name) {
        return this.methodMap[name];
    };
    ServiceDescription.prototype.isSecurityContextUsed = function () {
        if (this.permitAll || this.rolesAllowed.length > 0) {
            return true;
        }
        return this.methods.some(function (method) {
            return method.isSecurityContextUsed();
        });
    };
    return ServiceDescription;
}());
exports.ServiceDescription = ServiceDescription;
/**
 * Description of a parameter decorator.
 */
var ParamDescription = (function () {
    function ParamDescription() {
    }
    return ParamDescription;
}());
exports.ParamDescription = ParamDescription;
/**
 * The supported HTTP-Method decorators
 */
(function (HttpMethod) {
    HttpMethod[HttpMethod["GET"] = 0] = "GET";
    HttpMethod[HttpMethod["POST"] = 1] = "POST";
    HttpMethod[HttpMethod["PUT"] = 2] = "PUT";
    HttpMethod[HttpMethod["DELETE"] = 3] = "DELETE";
})(exports.HttpMethod || (exports.HttpMethod = {}));
var HttpMethod = exports.HttpMethod;
(function (ContextTypes) {
    ContextTypes[ContextTypes["HttpRequest"] = 0] = "HttpRequest";
    ContextTypes[ContextTypes["HttpResponse"] = 1] = "HttpResponse";
})(exports.ContextTypes || (exports.ContextTypes = {}));
var ContextTypes = exports.ContextTypes;
/**
 * Description of a Service Method that is annotatded with at least a HTTP-Method.
 */
var MethodDescription = (function () {
    function MethodDescription(name, httpMethod) {
        this.methodName = null;
        this.httpMethod = null;
        this.path = null;
        this.pathParams = [];
        this.headerParams = [];
        this.queryParams = [];
        this.contextParams = [];
        this.securityContextParam = null;
        this.permitAll = false;
        this.rolesAllowed = [];
        this.methodName = name;
        this.httpMethod = httpMethod;
    }
    MethodDescription.prototype.isSecurityContextUsed = function () {
        if (this.permitAll || this.rolesAllowed.length > 0) {
            return true;
        }
        return this.securityContextParam ? true : false;
    };
    return MethodDescription;
}());
exports.MethodDescription = MethodDescription;
//# sourceMappingURL=descriptions.js.map