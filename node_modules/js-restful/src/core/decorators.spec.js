"use strict";
var descriptions_1 = require('./descriptions');
var namings = require('./namings');
var test_classes_spec_1 = require('./test-classes.spec');
describe('rest-decorator', function () {
    var bookService = new test_classes_spec_1.BookService();
    describe('http method decorator', function () {
        it('should have a decorator GET on method allBooks', function () {
            expect(Reflect.getMetadata(namings.httpMethodMarker, bookService.allBooks)).toBe(descriptions_1.HttpMethod.GET);
        });
        it('should have a decorator POST on method createBook', function () {
            expect(Reflect.getMetadata(namings.httpMethodMarker, bookService.createBook)).toBe(descriptions_1.HttpMethod.POST);
        });
        it('should have a decorator PUT on method updateBook', function () {
            expect(Reflect.getMetadata(namings.httpMethodMarker, bookService.updateBook)).toBe(descriptions_1.HttpMethod.PUT);
        });
        it('should have a decorator DELETE on method deleteBook', function () {
            expect(Reflect.getMetadata(namings.httpMethodMarker, bookService.deleteBook)).toBe(descriptions_1.HttpMethod.DELETE);
        });
    });
    describe('path decorator', function () {
        it('should have a Path decorator at the class', function () {
            expect(Reflect.getMetadata(namings.path, bookService.constructor)).toBe('/books');
        });
        it('should have a Path decorator at method createBook', function () {
            expect(Reflect.getMetadata(namings.path, bookService.createBook)).toBe('/:name');
        });
        it('should have a Path decorator at method deleteBook', function () {
            expect(Reflect.getMetadata(namings.path, bookService.deleteBook)).toBe('/:id');
        });
    });
    describe('pathParam decorator', function () {
        it('should have a PathParam decorator at the method deleteBook for Parameter id with index 0', function () {
            var pathParams = Reflect.getMetadata(namings.pathParam, bookService, 'deleteBook');
            expect(pathParams.length).toBe(1);
            expect(pathParams).toContain({ paramName: 'id', index: 0 });
        });
        it('should have two PathParams at the method updateBook', function () {
            var pathParams = Reflect.getMetadata(namings.pathParam, bookService, 'updateBook');
            expect(pathParams.length).toBe(2);
            expect(pathParams).toContain({ paramName: 'id', index: 0 });
            expect(pathParams).toContain({ paramName: 'name', index: 1 });
        });
    });
    describe('headerParam decorator', function () {
        it('should have one HeaderParam at the method createBook', function () {
            var headerParams = Reflect.getMetadata(namings.headerParam, bookService, 'createBook');
            expect(headerParams.length).toBe(1);
            expect(headerParams).toContain({ paramName: 'token', index: 1 });
        });
    });
    describe('queryParam decorator', function () {
        it('should have one QueryParam at the method deleteBook', function () {
            var queryParams = Reflect.getMetadata(namings.queryParam, bookService, 'deleteBook');
            expect(queryParams.length).toBe(1);
            expect(queryParams).toContain({ paramName: 'time', index: 1 });
        });
    });
    describe('contextParam decorator', function () {
        it('should have two Context-param at the method contextTest', function () {
            var contextParams = Reflect.getMetadata(namings.contextParam, bookService, 'contextTest');
            expect(contextParams.length).toBe(2);
            expect(contextParams).toContain({ paramName: 'HttpRequest', index: 0 });
            expect(contextParams).toContain({ paramName: 'HttpResponse', index: 1 });
        });
    });
    describe('securitycontext parameter', function () {
        it('should have one SecurityContext-param at the method securityContextTest', function () {
            var secContextParams = Reflect.getMetadata(namings.securityContextParam, bookService, 'securityContextTest');
            expect(secContextParams).toEqual({ paramName: 'SecurityContext', index: 0 });
        });
    });
});
//# sourceMappingURL=decorators.spec.js.map