"use strict";
var descriptions_1 = require("./descriptions");
var namings = require('./namings');
var Parser = (function () {
    function Parser() {
        this.serviceDescription = new descriptions_1.ServiceDescription();
    }
    Parser.prototype.parseBasePath = function (service) {
        var path = Reflect.getMetadata(namings.path, service.constructor);
        return path ? path : null;
    };
    Parser.prototype.parsePermitAllClassLevel = function (service) {
        var permitAll = Reflect.getMetadata(namings.permitAll, service.constructor);
        return permitAll === true ? true : false;
    };
    Parser.prototype.parseRolesClassLevel = function (service) {
        var roles = Reflect.getMetadata(namings.rolesAllowed, service.constructor) || [];
        return roles;
    };
    Parser.prototype.parseMethodDescriptions = function (service) {
        var methods = [];
        var _loop_1 = function(name) {
            var method = service[name];
            if (method === service.constructor) {
                return "continue";
            }
            httpMethod = null;
            path = null;
            pathParams = [];
            headerParams = [];
            queryParams = [];
            contextParams = [];
            securityContextParam = null;
            permitAll = false;
            rolesAllowes = [];
            var methodKeys = Reflect.getMetadataKeys(method);
            methodKeys.forEach(function (k) {
                // determine the http method
                if (k === namings.httpMethodMarker) {
                    httpMethod = Reflect.getMetadata(k, method);
                }
                else if (k === namings.path) {
                    var rawPath = Reflect.getMetadata(k, method);
                    path = rawPath ? rawPath : null;
                }
                else if (k === namings.permitAll) {
                    permitAll = true;
                }
                else if (k === namings.rolesAllowed) {
                    rolesAllowes = Reflect.getMetadata(k, method) || [];
                }
            });
            // evaluate PathParams
            pathParams = Reflect.getMetadata(namings.pathParam, service, name) || [];
            // evaluate HeaderParams
            headerParams = Reflect.getMetadata(namings.headerParam, service, name) || [];
            // evaluate QueryParams
            queryParams = Reflect.getMetadata(namings.queryParam, service, name) || [];
            // evaluate ContextParams
            contextParams = Reflect.getMetadata(namings.contextParam, service, name) || [];
            // evaluate the security context
            securityContextParam = Reflect.getMetadata(namings.securityContextParam, service, name);
            if (httpMethod !== null) {
                md = new descriptions_1.MethodDescription(name, httpMethod);
                md.path = path;
                md.pathParams = pathParams;
                md.headerParams = headerParams;
                md.queryParams = queryParams;
                md.contextParams = contextParams;
                md.securityContextParam = securityContextParam;
                md.permitAll = permitAll;
                md.rolesAllowed = rolesAllowes;
                methods.push(md);
            }
        };
        var httpMethod, path, pathParams, headerParams, queryParams, contextParams, securityContextParam, permitAll, rolesAllowes, md;
        for (var _i = 0, _a = Object.getOwnPropertyNames(Object.getPrototypeOf(service)); _i < _a.length; _i++) {
            var name = _a[_i];
            _loop_1(name);
        }
        return methods;
    };
    Parser.prototype.traverse = function (service) {
        var _this = this;
        var basePath = this.parseBasePath(service);
        // may be null or /
        this.serviceDescription.basePath = basePath;
        var permitAll = this.parsePermitAllClassLevel(service);
        this.serviceDescription.permitAll = permitAll;
        var roles = this.parseRolesClassLevel(service);
        this.serviceDescription.rolesAllowed = roles;
        // only descriptions marked with get, post, put, delete
        var methods = this.parseMethodDescriptions(service);
        methods.forEach(function (aMethod) {
            _this.serviceDescription.addMethod(aMethod);
        });
        return this.serviceDescription;
    };
    return Parser;
}());
var ServiceParser = (function () {
    function ServiceParser() {
    }
    ServiceParser.parse = function (service) {
        var parser = new Parser();
        return parser.traverse(service);
    };
    return ServiceParser;
}());
exports.ServiceParser = ServiceParser;
//# sourceMappingURL=decorator-parser.js.map