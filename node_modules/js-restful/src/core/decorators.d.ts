import { ContextTypes } from './descriptions';
/**
 * Publish a method as an http endpoint for GET requests. If no Path is specified the path will be /.
 * The decorator is only allowed on methods.
 * @returns the decorated function
 */
export declare function GET(): (target: Object, key: string, descriptor: TypedPropertyDescriptor<any>) => void;
/**
 * Publish a method as an http endpoint for POST requests. If no Path is specified the path will be /.
 * The decorator is only allowed on methods.
 * @returns the decorated function
 */
export declare function POST(): (target: Object, key: string, descriptor: TypedPropertyDescriptor<any>) => void;
/**
 * Publish a method as an http endpoint for PUT requests. If no Path is specified the path will be /.
 * The decorator is only allowed on methods.
 * @returns the decorated function
 */
export declare function PUT(): (target: Object, key: string, descriptor: TypedPropertyDescriptor<any>) => void;
/**
 * Publish a method as an http endpoint for DELETE requests. If no Path is specified the path will be /.
 * The decorator is only allowed on methods.
 * @returns the decorated function
 */
export declare function DELETE(): (target: Object, key: string, descriptor: TypedPropertyDescriptor<any>) => void;
/**
 * Specify the Path for the ressource. If the decorator is present at class level all methods paths will be
 * prefixed with this path.
 * @param path The path for the class or method. The path must not be start with /.
 * The slash will be added automatically.
 * @returns the decorated function
 */
export declare function Path(path: string): Function;
/**
 * Specifies how a method parameter is evealuated. In this case the value will be taken
 * from the parameter that is specified in the path decorator.
 * @param name the name in the path that should be used to provide the parameter to the method.
 * @returns the decorated function
 */
export declare function PathParam(name: string): (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;
/**
 * Specifies how a method parameter is evaluated. In this case the value will be taken
 * from a http header.
 * @param name the name in the http header that should be used to provide the parameter to the method.
 * @returns the decorated function
 */
export declare function HeaderParam(name: string): (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;
/**
 * Specifies how a method parameter is evaluated. In this case the value will be taken
 * from a url query parameter.
 * @param name the name of the query param that should be used to provide the parameter to the method.
 * @returns the decorated function
 */
export declare function QueryParam(name: string): (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;
/**
 * Specifies how a method parameter is evaluated. In this case the value will be taken
 * from the context (for example the current Request).
 * @param contextType the ContextTypes that should be used to provide the parameter to the method.
 * @returns the decorated function
 */
export declare function Context(contextType: ContextTypes): (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;
/**
 * Specifies a method parameter that is a ISecurityContext
 * @returns the decorated function
 */
export declare function SecurityContext(): (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;
export declare function PermitAll(): Function;
export declare function RolesAllowed(roles: string[]): Function;
