/**
 * A heigher level description of a service. No need to parse
 * the Decortaors by yourself. Just use the @see ServiceParser.
 */
export declare class ServiceDescription {
    basePath: string | void;
    permitAll: boolean;
    rolesAllowed: string[];
    methods: MethodDescription[];
    private methodMap;
    addMethod(methodDescriptor: MethodDescription): void;
    getMethodDescriptorForMethodName(name: string): MethodDescription;
    isSecurityContextUsed(): boolean;
}
/**
 * Description of a parameter decorator.
 */
export declare class ParamDescription {
    paramName: string;
    index: number;
}
/**
 * The supported HTTP-Method decorators
 */
export declare enum HttpMethod {
    GET = 0,
    POST = 1,
    PUT = 2,
    DELETE = 3,
}
export declare enum ContextTypes {
    HttpRequest = 0,
    HttpResponse = 1,
}
/**
 * Description of a Service Method that is annotatded with at least a HTTP-Method.
 */
export declare class MethodDescription {
    methodName: string;
    httpMethod: HttpMethod;
    path: String | void;
    pathParams: ParamDescription[];
    headerParams: ParamDescription[];
    queryParams: ParamDescription[];
    contextParams: ParamDescription[];
    securityContextParam: ParamDescription;
    permitAll: boolean;
    rolesAllowed: string[];
    constructor(name: string, httpMethod: HttpMethod);
    isSecurityContextUsed(): boolean;
}
export interface IUser {
}
export interface ISecurityContext {
    user: IUser;
    isUserInRole(roleName: string): boolean;
}
